{"version":3,"sources":["Navbar.js","ClientApi.js","App.js","serviceWorker.js","index.js"],"names":["Naomi","className","ClientApi","useState","name","setName","userName","setUsername","followers","setFollowers","following","setFollowing","repos","setRepos","avatar","setAvatar","userInput","setUserInput","error","setError","search","setSearch","filteredRepos","setFilteredRepos","useEffect","fetch","then","res","json","data","setData","login","avatar_url","filter","repo","toLowerCase","includes","class","Form","onSubmit","message","Group","Input","placeholder","onChange","e","target","value","Button","content","Card","Image","src","wrapped","ui","Content","Header","extra","href","Icon","type","map","key","id","html_url","description","language","forks","App","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.25518189.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Naomi () {\n    return(\n        <div className=\"navbar\">Github Repositories With Search Functionality</div>\n    )\n}\n\nexport default Naomi;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {Form, Card, Image, Icon} from 'semantic-ui-react';\n\nfunction ClientApi () {\n\n// Use state to define all the variables that\n// will be used and will be defined later\n\nconst [name, setName] = useState('');\nconst [userName, setUsername] = useState('');\nconst [followers, setFollowers] = useState('');\nconst [following, setFollowing] = useState('');\nconst [repos, setRepos] = useState([]);\nconst [avatar, setAvatar] = useState('');\nconst [userInput, setUserInput] = useState('');\nconst [error, setError] = useState(null);\nconst [search, setSearch] = useState('');  \nconst [filteredRepos, setFilteredRepos]= useState([]);\n\n // Fetch data from the Github Api\n\n useEffect(() => {\n    fetch('https://api.github.com/users/example')\n    .then(res => res.json())\n    .then(data => { \n     setData(data);\n    });\n }, [] );\n\n // Fill the componenents the Data received from the Github API\n\n const setData = ({\n   name,\n   login,\n   followers,\n   following,\n   avatar_url\n }) => {\n    setName(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setAvatar(avatar_url); \n };\n\n  // Receives the input from the form of \"repos\"\n\n  const handleSearch =  (e) => {\n   setUserInput(e.target.value)\n }\n\n  // Update the default data from what we typed in the form.\n\n  const handleSubmitAndReceiveUserInfo = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n    .then(res => res.json())\n    .then(data => {\n      if ( data.message ){\n        setError(data.message )\n      } else {\n      setData(data);\n      setError(null);\n      }\n    });\n\n    // fetch the repos separetly because it was returning an string \n    // and we want an object to .map() it\n\n    fetch(`https://api.github.com/users/${userInput}/repos`)\n    .then(res  => res.json())\n    .then(repos => { \n      if (repos.message) {\n        setError(repos.message)\n      } else {\n     setRepos(repos);\n     setError(null)\n   }\n    });\n }  \n\n // Filter the Repos that includes the input (e) from handlesearch()\n\n useEffect(() => {\n   setFilteredRepos(\n     repos.filter( repo => {\n       return  repo.name.toLowerCase().includes( search.toLowerCase() )\n      })\n   )\n }, [search, repos])\n\n  return (\n    <div>\n        <div class=\"row\">\n          <div class=\"column\">\n          <div className=\"search\">\n          <Form onSubmit={handleSubmitAndReceiveUserInfo}>\n            <Form.Group>\n              <Form.Input  placeholder='Github User' name='github user' onChange={handleSearch} /> \n              <Form.Button content='Search!'/>\n            </Form.Group>\n          </Form>\n        </div>\n      {error? (<h1>{error}</h1> ) : (\n\n        <div className=\"card\">\n        <Card>\n          <Image src={avatar} wrapped ui={false}/>\n\n          <Card.Content>\n            <Card.Header>{name}</Card.Header>\n            <Card.Header>{userName}</Card.Header>\n          </Card.Content>\n\n          <Card.Content extra>\n            <a href={`https://github.com/${userName}?tab=followers`}>\n              <Icon name='user' />\n              {followers} followers          \n            </a>\n          </Card.Content>\n         \n          <Card.Content extra>\n            <a href={`https://github.com/${userName}?tab=following`}>\n              <Icon name='user' />\n              {following} Following\n            </a>\n          </Card.Content> \n        </Card>\n        </div>\n        ) \n      };\n     </div>\n\n        <div class=\"column\">\n            <input className=\"repos-search\" type=\"text\"  placeholder=\"Filter Repositories\" onChange={ e => setSearch(e.target.value)}/>\n              <ul className=\"repo-list\">\n              {filteredRepos.map(repo => {\n                return <li key={repo.id} className=\"repo-item\">\n                <a href={repo.html_url}>{repo.name}</a> \n                <p className=\"repo-description\">{repo.description}</p>\n                <p className=\"repo-language\"> Language: {repo.language}   \n                  <br/>\n                  Forks: {repo.forks}</p>\n                  <hr/>\n                </li>\n              })\n              }\n              </ul>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default ClientApi;","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport ClientApi from './ClientApi';\n\nfunction App() {\nreturn (\n  <div>\n    <Navbar/>\n    <ClientApi/>\n  </div>\n)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}